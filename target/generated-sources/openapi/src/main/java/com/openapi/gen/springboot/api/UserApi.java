/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.openapi.gen.springboot.api;

import java.util.UUID;
import com.openapi.gen.springboot.dto.UserDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-06T18:34:01.247863781+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * GET /user : Get All Users
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAll",
        summary = "Get All Users",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDTO>> getAll(
        
    ) {
        return getDelegate().getAll();
    }


    /**
     * GET /user/{id} : Get User By Id
     *
     * @param id Unique Id of an User (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get User By Id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDTO> getUserById(
        @Parameter(name = "id", description = "Unique Id of an User", required = true, schema = @Schema(description = "")) @PathVariable("id") UUID id
    ) {
        return getDelegate().getUserById(id);
    }


    /**
     * POST /user : Save User
     *
     * @param userDTO  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "saveUser",
        summary = "Save User",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDTO> saveUser(
        @Parameter(name = "UserDTO", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) UserDTO userDTO
    ) {
        return getDelegate().saveUser(userDTO);
    }

}
